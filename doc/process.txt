
Problem 1
    commits [
        e97ba9c21651a40a91715f83697e3f5c043ae1ed,
        7861e438793e73cce69af22aa53db2f0289884c8
    ]

How can we print the board to a console?



One idea is to simply print the 2d grid of characters.

  ABCD
  EFGH
  IJKL
  MNO 

This solution is simple and could be nice for playing on smaller consoles.



A slightly nicer looking interface would include a grid made of - and | chars.

  ---------
  |A|B|C|D|
  ---------
  |E|F|G|H|
  ---------
  |I|J|K|L|
  ---------
  |M|N|O| |
  ---------
  
This is a slightly more complex idea, but could help the user identify the
spacer tile when on the edge of the board. It also looks nicer.



Problem 2
    commit [55a1ea7a6132a1289493e938151bd86ca18cbdf3]

How can we handle moves?

On a physical slide puzzle we can slide a tile into the space. In a digital
  version we can accomplish the same by swapping the space with an adjacent tile

Consider the move below where we start with the solved board and swap L and space

  ABCD    ABCD
  EFGH -> EFGH
  IJKL    IJK 
  MNO     MNOL

Actually swapping tiles should be trivial, however we have to consider if a move
  is valid or not beforehand. Another thing to consider is how can we find out
  which tiles are able to move?

A simple way to handle a move would be to keep track of the spacer tile and do
  moves based around its location. Getting surrounding tiles will require more
  math, but it should be fairly simple

If you have the x and y location of the spacer tile you can find the following
  adjacent tiles with some simple arithmatic
  
  The tile above the space will be at (x, y - 1)
  The tile below will be at (x, y + 1)
  Left is (x - 1, y)
  and right is (x + 1, y)
  
These four moves should be the only valid moves in the game (assuming we dont try
  moving the space out of the board). An easy way to avoid going out of bounds
  would be to check that the position of the adjacent tile is 0 <= x < width
  and 0 <= y < height

Now we can work on two functions, one to handle moves and one to actually swap
  the tiles



Problem 3

Shuffling tiles and getting user input

We can shuffle the board by creating a loop that performs a few hundred valid
  moves on the board. Performing actual moves is important as just shuffling
  the tiles could create an unsolvable puzzle

As for input, a fancier console program would use something like conio or curses
  to draw to the screen and get input. For this project I'm going to keep it
  simple and print the board for every move the user makes. We can use simple
  getc calls and do some action based on the character given. We will also want
  to have a loop to keep asking for input until the puzzle is solved or the
  player quits
